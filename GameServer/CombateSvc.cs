//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ICombateSvc", SessionMode=System.ServiceModel.SessionMode.Required)]
public interface ICombateSvc
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICombateSvc/StartMatch")]
    void StartMatch(string opponentName, string opponentId, bool isPlayer1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICombateSvc/StartMatch")]
    System.Threading.Tasks.Task StartMatchAsync(string opponentName, string opponentId, bool isPlayer1);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICombateSvc/CancelMatch")]
    void CancelMatch(bool isWorthPoints);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICombateSvc/CancelMatch")]
    System.Threading.Tasks.Task CancelMatchAsync(bool isWorthPoints);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICombateSvc/MoveBoardPiece")]
    void MoveBoardPiece(int srcX, int srcY, int destX, int destY);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICombateSvc/MoveBoardPiece")]
    System.Threading.Tasks.Task MoveBoardPieceAsync(int srcX, int srcY, int destX, int destY);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ICombateSvc/AttackBoardPiece")]
    void AttackBoardPiece(int srcX, int srcY, int destX, int destY, int attackerPowerLevel, int defenderPowerLevel);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/ICombateSvc/AttackBoardPiece")]
    System.Threading.Tasks.Task AttackBoardPieceAsync(int srcX, int srcY, int destX, int destY, int attackerPowerLevel, int defenderPowerLevel);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICombateSvc/ShowPowerLevel", ReplyAction="http://tempuri.org/ICombateSvc/ShowPowerLevelResponse")]
    int ShowPowerLevel(int srcX, int srcY);
    
    [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICombateSvc/ShowPowerLevel", ReplyAction="http://tempuri.org/ICombateSvc/ShowPowerLevelResponse")]
    System.Threading.Tasks.Task<int> ShowPowerLevelAsync(int srcX, int srcY);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ICombateSvcChannel : ICombateSvc, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CombateSvcClient : System.ServiceModel.ClientBase<ICombateSvc>, ICombateSvc
{
    
    public CombateSvcClient()
    {
    }
    
    public CombateSvcClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CombateSvcClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CombateSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CombateSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void StartMatch(string opponentName, string opponentId, bool isPlayer1)
    {
        base.Channel.StartMatch(opponentName, opponentId, isPlayer1);
    }
    
    public System.Threading.Tasks.Task StartMatchAsync(string opponentName, string opponentId, bool isPlayer1)
    {
        return base.Channel.StartMatchAsync(opponentName, opponentId, isPlayer1);
    }
    
    public void CancelMatch(bool isWorthPoints)
    {
        base.Channel.CancelMatch(isWorthPoints);
    }
    
    public System.Threading.Tasks.Task CancelMatchAsync(bool isWorthPoints)
    {
        return base.Channel.CancelMatchAsync(isWorthPoints);
    }
    
    public void MoveBoardPiece(int srcX, int srcY, int destX, int destY)
    {
        base.Channel.MoveBoardPiece(srcX, srcY, destX, destY);
    }
    
    public System.Threading.Tasks.Task MoveBoardPieceAsync(int srcX, int srcY, int destX, int destY)
    {
        return base.Channel.MoveBoardPieceAsync(srcX, srcY, destX, destY);
    }
    
    public void AttackBoardPiece(int srcX, int srcY, int destX, int destY, int attackerPowerLevel, int defenderPowerLevel)
    {
        base.Channel.AttackBoardPiece(srcX, srcY, destX, destY, attackerPowerLevel, defenderPowerLevel);
    }
    
    public System.Threading.Tasks.Task AttackBoardPieceAsync(int srcX, int srcY, int destX, int destY, int attackerPowerLevel, int defenderPowerLevel)
    {
        return base.Channel.AttackBoardPieceAsync(srcX, srcY, destX, destY, attackerPowerLevel, defenderPowerLevel);
    }
    
    public int ShowPowerLevel(int srcX, int srcY)
    {
        return base.Channel.ShowPowerLevel(srcX, srcY);
    }
    
    public System.Threading.Tasks.Task<int> ShowPowerLevelAsync(int srcX, int srcY)
    {
        return base.Channel.ShowPowerLevelAsync(srcX, srcY);
    }
}
